# 公司的npm仓库镜像(一般不建议使用此仓库作为registry,只建议在@yh上使用)
# registry=http://npm0.yinhaiyun.com/
# 华为云的npm仓库镜像
# registry=https://repo.huaweicloud.com/repository/npm/
# 淘宝的npm仓库镜像
registry=https://registry.npmmirror.com
# @yh的模块下载仓库
@yh:registry=http://npm0.yinhaiyun.com/
# 保证在需要使用node.js运行代码时,其能与npm(运行时nodejs.js)使用相同版本
scripts-prepend-node-path=true
# 是否自动执行pre和post脚本
# 例如: 当设置为true时,执行`pnpm foo`就相当于执行了`pnpm prefoo && pnpm foo && pnpm postfoo`
# 当设置为false时,则不会执行`pre`和`post`脚本,执行`pnpm foo`就只会执行`pnpm foo`
enable-pre-post-scripts=true
# 处理依赖的语义化版本时,下载最低版本还是最高版本
# 可选值:
# highest: 代表下载满足语义化版本的最高版本;
# 优点: 可以始终使用一个依赖的最新版本,最快获得依赖的功能新增及问题修复
# 缺点: 风险不可控,可能出现由于版本更新导致的小问题或来自npm仓库的依赖劫持等问题
# lowest-direct: 忽略语义化版本,直接下载依赖声明中定义的版本;对于`pnpm@^8.0.0`,这是建议的值
# 优点: 风险可控,对于一个依赖来说,下载的依赖始终是其声明的最低要求版本,可以有效避免版本快速迭代过程中出现的未知问题
# 缺点: 如果指定的依赖的版本有严重问题(安全等),那么需要手动修改`package.json`到相应的版本以进行修复
# time-based: 对于直接依赖使用`lowest-direct`策略;对于直接依赖的子依赖,会被处理成直接依赖发布时子依赖的最新版本(语义化版本);这个选项不做推荐,只是写在这里.
# 例如: 在`package.json`中定义了一个依赖的版本`a^4.0.0`,如果当前a的最新的版本号为`4.3.2`,那么在上述的两个策略中,则分别会下载`4.3.2`及`4.0.0`
resolution-mode=lowest-direct
# 跳过workspace根目录检查,在根目录install依赖时不需要加-w参数
ignore-workspace-root-check=true
# 指定.pnpmfile.cjs的位置
pnpmfile=.pnpm/.pnpmfile.cjs
# 忽略git检查
git-checks=false
COREPACK_NPM_REGISTRY = https://repo.huaweicloud.com/repository/npm/
package-manager-strict=false
